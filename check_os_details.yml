---
- name: Gather OS Details and Check Security Services
  hosts: servers
  gather_facts: yes
  tasks:
  
    - name: Display OS Information
      debug:
        msg: 
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Kernel: {{ ansible_kernel }}"
          - "Architecture: {{ ansible_architecture }}"
          - "Hostname: {{ ansible_hostname }}"
          - "Processor: {{ ansible_processor[1] | default('N/A') }}"
          - "Total Memory: {{ ansible_memtotal_mb }} MB"
          - "IP Address: {{ ansible_default_ipv4.address | default('N/A') }}"

    - name: Check if UFW is active (Ubuntu/Debian)
      command: ufw status
      register: ufw_status
      ignore_errors: yes
      become: yes
      when: ansible_os_family == "Debian"

    - name: Display UFW Status
      debug:
        msg: "UFW Status: {{ ufw_status.stdout | default('UFW not installed or inactive') }}"
      when: ansible_os_family == "Debian"

    - name: Check if Firewalld is active (RHEL/CentOS)
      command: systemctl is-active firewalld
      register: firewalld_status
      ignore_errors: yes
      become: yes
      when: ansible_os_family == "RedHat"

    - name: Display Firewalld Status
      debug:
        msg: "Firewalld Status: {{ firewalld_status.stdout | default('Firewalld not installed or inactive') }}"
      when: ansible_os_family == "RedHat"

    - name: Check if iptables is active
      command: iptables -L
      register: iptables_status
      ignore_errors: yes
      become: yes

    - name: Display iptables Rules
      debug:
        msg: "{{ iptables_status.stdout | default('No iptables rules found or command failed') }}"

    - name: Check SELinux status
      command: sestatus
      register: selinux_status
      ignore_errors: yes
      become: yes
      when: ansible_os_family == "RedHat"

    - name: Display SELinux Status
      debug:
        msg: "SELinux Status: {{ selinux_status.stdout | default('SELinux not available') }}"
      when: ansible_os_family == "RedHat"

    - name: Check if DS-agent is running
      command: systemctl is-active ds_agent
      register: ds_agent_status
      ignore_errors: yes
      become: yes

    - name: Display DS-agent Status
      debug:
        msg: "DS-agent Status: {{ ds_agent_status.stdout | default('DS-agent not installed or inactive') }}"
